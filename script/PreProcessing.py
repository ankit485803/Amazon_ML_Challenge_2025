# -*- coding: utf-8 -*-
"""PreProcessing.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DTDmdS4aQNsWm_m8shNr1rLbWuyA4v_6
"""

import pandas as pd

# Load the dataset
file_path = 'C:/Users/sanja/Desktop/Amazon/data/train.csv'  # Adjust path accordingly
df = pd.read_csv(file_path)

# Initial inspection
print(df.head())
print(df.info())
print(df.describe())

## Handling MISSING and NULL values

# Check for null values in the dataset
null_values = df.isnull().sum()

# Print total null values for each column
print("Total null values per column:")
print(null_values)

# Optionally, we can also check for rows that contain any null values
null_rows = df[df.isnull().any(axis=1)]
print(f"\nNumber of rows with any null values: {null_rows.shape[0]}")

# Load the TEST data
file_path = 'C:/Users/sanja/Desktop/Amazon/data/test.csv'  # Adjust path accordingly
df_test = pd.read_csv(file_path)

# Initial inspection
print(df_test.head())
print(df_test.info())
print(df_test.describe())

# Check for null values in the TEST data
null_values = df_test.isnull().sum()

# Print total null values for each column
print("Total null values per column:")
print(null_values)







import pandas as pd
import numpy as np

# Load the training data (train.csv) and test data (test.csv)
train_df = pd.read_csv("C:/Users/sanja/Desktop/Amazon/data/train.csv")
test_df = pd.read_csv("C:/Users/sanja/Desktop/Amazon/data/test.csv")

# Calculate the mean price from the training data
mean_price = train_df['price'].mean()
print(f"Calculated mean price from training data: {mean_price:.2f}")

# Define a percentage range for randomness (e.g., ±10% of the mean price)
random_variation_percentage = 0.10  # 10% variation around the mean price

# Generate random prices within the specified range (mean ± 10%)
min_price = mean_price * (1 - random_variation_percentage)
max_price = mean_price * (1 + random_variation_percentage)

# Use numpy to generate random prices for each test sample
random_prices = np.random.uniform(min_price, max_price, size=len(test_df))

# Create the output dataframe with sample_id from test data and the random prices
output_df = test_df[['sample_id']].copy()
output_df['price'] = random_prices  # Assign the generated random prices

# Save the predictions to a CSV file (test_out.csv)
output_df.to_csv('test_out3.csv', index=False)

print("Generated predictions with random prices and saved to test_out3.csv")



